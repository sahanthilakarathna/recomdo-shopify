{% assign avg_rating = block.settings.product.metafields.demo.avg_rating.value | round %}

<style>
  .main {
    background-color: white;
    height: 50vh;
  }

  img {
    width: 50%;
  }

  .chat-widget-style {
    position: fixed;
    z-index: 9999;
    bottom: 0;
    right: 20px;
    width: 60px;
    height: 60px;
    background-color: #1e771a;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #fff;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
  }

  .chat-widget-style:hover {
    background-color: #0e335b;

  }


  .chat-window-style {
    display: none;
    position: fixed;
    top: 90px;
    right: 0;
    z-index: 9999;
    width: 100%;
    height: 85vh;
    background-color: #fff;
    border: 1px solid #050505;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    left: 50%;
    transform: translateX(-50%);
    /* remove in case */
  }



  .autofill-content-style {
    display: block;
    height: 50px;
    width: 100%;
    overflow-y: auto;
    padding: 8px 0;
    position: absolute;
    color: #00000075;
    left: 7px;
    font-size: 16px;
    z-index: 0;
    background-color: #fff;
  }

  .autofill-content-style span {
    letter-spacing: 0;
  }

  .input-container-style {
    /* padding: 10px; */
    display: flex;
    gap: 10px;
    border-top: 1px solid #ccc;
  }

  .message-input-style {
    flex-grow: 1;
    padding: 8px;
    margin-right: 10px;
    font-size: 16px;
    z-index: 1;
    background-color: transparent;
    /* height: 50px; */
    border: none;
  }

  .send-button-style {
    padding: 8px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    z-index: 2;
  }

  .suggestion-container-style {
    display: grid;
    padding: 20px;
    height: 100%;
    overflow-y: auto;
    grid-template-columns: 3fr 1fr;
  }

  .suggest-content-style {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    align-items: center;
  }

  .suggestion-container-style a {
    text-decoration: none;
    color: #000;
    font-weight: 600;
    display: block;
  }

  .item-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .item-container a {
    text-decoration: none;
    color: #000;
    font-weight: 600;
  }

  .item-info span {
    font-size: 20px;
    color: #000;
    font-weight: 600;
  }

  .item-info span:hover {
    font-size: 20px;
    color: red;
    font-weight: 600;
  }

  .item-info p {
    font-size: 16px;
    color: #000;
    font-weight: 600;
  }

  .other-suggestions {
    display: block;
    margin: 0 auto;
  }

  .other-suggestions a {
    display: block;
  }

  .category-suggestions {
    margin-bottom: 20px;
  }

  .loading {
    display: none;
  }
</style>

<div class="main">
  <div id="chat-widget" class="chat-widget-style" onclick="toggleChat()">
    <span>Search</span>
  </div>
  <div id="chat-window" class="chat-window-style">


    <div id="input-container" class="input-container-style">
      <div id="autofill-content" class="autofill-content-style">
        <span id="autofill"></span>
      </div>
      <input type="text" id="message-input" placeholder="Type your message" class="message-input-style">
      <button id="send-button" class="send-button-style" onclick="Close()">X</button>
      <button id="send-button" class="send-button-style" onclick="autoComplete()">Search</button>
    </div>

    <div id="suggestion-container" class="suggestion-container-style">
      <div id="loading" class="loading">Loading...</div>
      <div id="suggest-content" class="suggest-content-style">

      </div>
      <div id="other-suggestions" class="other-suggestions">
        <div id="category-suggestions" class="category-suggestions">

        </div>
        <div id="word-suggestions" class="word-suggestions">

        </div>
      </div>


    </div>


  </div>

</div>


<script>


  function toggleChat() {
    const chatWindow = document.getElementById('chat-window');
    chatWindow.style.display = (chatWindow.style.display == 'none' || !chatWindow.style.display)
      ? 'block'
      : 'none'
  }
  function Close() {
    const chatWindow = document.getElementById('chat-window');
    chatWindow.style.display = 'none'
  }
  const inputtxt = document.getElementById("message-input");

  inputtxt.addEventListener('input', (e) => {
    console.log("inputeeeee", e)
    autoFill(e);
    autoComplete();
  })

  inputtxt.addEventListener('keydown', (e) => {

    if (e.code == "ArrowRight" || e.code == "ArrowLeft" || e.code == "Tab") {
      console.log("keydowneeeee", e)
      autoFill(e);
      autoComplete()
    }
  })



  async function autoFill(e) {
    const inputElement = document.getElementById('message-input');
    const keyword = inputElement.value;
    const autofillContent = document.getElementById('autofill');
    var matchword = autofillContent.innerText
    if (e.type === "input") {
      if (localStorage.getItem("autofill") == "undefined" || !localStorage.getItem("autofill")) {
        localStorage.setItem("autofill", '');
      }

      //====AUTOFILL API CALL START====
      getAutoFill(keyword)
        .then(suggestions => {

          // You can handle suggestions here
        })
        //====AUTOFILL API CALL END====
        .catch(error => {
          console.error("Error occurred:", error);
        });
      var suggestions = localStorage.getItem("autofill") ? JSON.parse(localStorage.getItem("autofill")) : [];
      const messageElement = document.createElement('div');

      if (suggestions.length > 0) {
        let regex = new RegExp('^' + keyword + '.*', 'i');
        var words = suggestions;
        var word = [];
        autofillContent.textContent = '';
        for (let i = 0; i < words.length; i++) {
          if (words[i].match(regex)) {
            word = words[i]
            var match = keyword + words[i].slice(keyword.length, words[i].length)
            autofillContent.textContent = match;

            break;
          }
        }
      }
    } else if (e.type === "keydown") {

      if (e.keyCode === 37) { // Left arrow key
        var currentValue = keyword
        if (currentValue.length > 1) {
          inputElement.value = currentValue.slice(0, -1)
        } else {

          autofillContent.textContent = '';
          inputElement.value = '';
        }
      } else if (e.keyCode === 39 && matchword) { // Right arrow key
        if (matchword.length > 0) {
          var firstLetter = matchword.charAt(keyword.length);
          inputElement.value = keyword + firstLetter;
        }

      } else if (e.keyCode === 9) {
        if (matchword.length > 0) {
          inputElement.value = matchword
        }
      }
    }


    if (keyword.length < 1) {
      autofillContent.textContent = '';
    }


  }

  async function getAutoFill(keyword) {
    return new Promise((resolve, reject) => {
      if (keyword.length == 1) {
        const xhr = new XMLHttpRequest();
        xhr.open('POST', 'http://shopifybackend.ai/autofill', true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.onload = function () {
          if (xhr.status === 201 || xhr.status === 200) {
            var response = JSON.parse(xhr.response);
            var suggestions = response.result.data.autofill_names;
            localStorage.setItem("autofill", JSON.stringify(suggestions));
            resolve(suggestions);
          } else {
            console.error('some error occurred');
            reject('Some error occurred');
          }
        };
        xhr.onerror = function () {
          console.error('another error occurred');
          reject('Another error occurred');
        };
        xhr.send(JSON.stringify({ keyword }));

      }
    });
  }


  async function autoComplete() {
    if (localStorage.getItem("autocomplete") == "undefined" || !localStorage.getItem("autocomplete")) {
      localStorage.setItem("autocomplete", '');
    }
    const inputElement = document.getElementById('message-input');
    const keyword = inputElement.value;
    console.log("AUTOCOM KEYWORD", keyword)


    //====AUTOCOMPLETE API CALL START====

    if (keyword.length < 1) {
      const categoryContent = document.getElementById('category-suggestions');
      const autofillContent = document.getElementById('suggest-content');
      const wordContent = document.getElementById('word-suggestions');
      autofillContent.innerHTML = '';
      categoryContent.innerHTML = '';
      wordContent.innerHTML = '';
    }


    await getAutoComplete(keyword)
      .then(suggestions => {
        // You can handle suggestions here
        // var suggestions = localStorage.getItem("autocomplete") ? JSON.parse(localStorage.getItem("autocomplete")) : [];

        const messageElement = document.createElement('div');
        const autofillContent = document.getElementById('suggest-content');
        const categoryContent = document.getElementById('category-suggestions');
        const wordContent = document.getElementById('word-suggestions');
        autofillContent.innerHTML = '';
        categoryContent.innerHTML = '';
        wordContent.innerHTML = ''
        var products = suggestions.main_results
        var categories = suggestions.category_results
        var wordSuggests = suggestions.suggestions
        console.log("autocom products", products)
        if (products.length > 0) {


          products.forEach(function (item) {
            var containerDiv = document.createElement("div");
            containerDiv.className = "item-container";

            // Create elements for the item details
            var nameElement = document.createElement("span");
            nameElement.textContent = item.name;

            var priceElement = document.createElement("p");
            priceElement.textContent = item.price;

            var itemInfoDiv = document.createElement("div");
            itemInfoDiv.className = "item-info";

            var imageElement = document.createElement("img");
            imageElement.src = item.image;

            // Create a link element for the item's URL
            var urlElement = document.createElement("a");
            urlElement.href = item.url_key;
            // urlElement.textContent = item.name;

            // Append elements to the container div

            containerDiv.appendChild(imageElement);
            itemInfoDiv.appendChild(nameElement);
            itemInfoDiv.appendChild(priceElement);
            containerDiv.appendChild(itemInfoDiv);

            // containerDiv.appendChild(urlElement);

            urlElement.appendChild(containerDiv)

            autofillContent.appendChild(urlElement)
          });

        }
        if (wordSuggests.length) {

          var wordTitle = document.createElement("p");
          wordTitle.textContent = "Popular Searches"
          wordTitle.className = "suggestion-title";
          wordContent.appendChild(wordTitle);
          wordSuggests.forEach(function (item) {
            var wordElement = document.createElement("a");
            wordElement.href = window.location.href + 'search?q=' + item.suggestion_text;
            wordElement.textContent = item.suggestion_text;
            wordContent.appendChild(wordElement)
          })
        }
        if (categories.length) {
          var categoryTitle = document.createElement("p");
          categoryTitle.textContent = "Categories"
          categoryTitle.className = "suggestion-title";
          categoryContent.appendChild(categoryTitle);
          categories.forEach(function (item) {
            var categoryElement = document.createElement("a");
            categoryElement.href = item.category_url;
            categoryElement.textContent = item.category_name;
            categoryContent.appendChild(categoryElement)
          })
        }
      })
      .catch(error => {
        console.error("Error occurred:", error);
      });


    //====AUTOCOMPLETE API CALL END====

  }


  async function getAutoComplete(keyword) {
    return new Promise((resolve, reject) => {
      if (keyword.length) {
        const loading = document.getElementById('loading');
        const xhr = new XMLHttpRequest();
        xhr.open('POST', 'http://shopifybackend.ai/autocomplete', true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.onload = function () {
          if (xhr.status === 201 || xhr.status === 200) {
            var response = JSON.parse(xhr.response);
            var suggestions = response.result.data;
            localStorage.setItem("autocomplete", JSON.stringify(suggestions));
            resolve(suggestions);
          } else {
            console.error('some error occurred');
            reject('Some error occurred');
          }
        };
        xhr.onerror = function () {
          console.error('another error occurred');
          reject('Another error occurred');
        };
        xhr.send(JSON.stringify({ keyword }));

      }
    });
  }

  document.addEventListener('click', function (event) {
    const chatWindow = document.getElementById('chat-window');
    const chatWidget = document.getElementById('chat-widget');

    if (!chatWindow.contains(event.target) && !chatWidget.contains(event.target)) { // Clicked outside of both chat window and chat widget
      chatWindow.style.display = 'none';
    }
  });
</script>

{% schema %}
{
"name": "recomdo ai App",
"target": "body",
"settings": []
}
{% endschema %}